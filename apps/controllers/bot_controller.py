from apps.dto.bot_dto import BotDto
from apps.controllers._base_controller import BaseController
import os
from openai import OpenAI
from difflib import get_close_matches
import re
from apps.utils.spa_locations import spa_locations
from apps.utils.spa_services import spa_services



# load_dotenv()
# openai.api_key = os.getenv("OPENAI_API_KEY", "")

def is_request_for_spa_intro(message, spa_name):
    message_lower = message.lower()
    name_lower = spa_name.lower()

    # N·∫øu ch·ªâ ƒë∆°n gi·∫£n l√† t√™n spa ‚Üí y√™u c·∫ßu gi·ªõi thi·ªáu
    if message_lower.strip() == name_lower:
        return True

    # M·ªôt s·ªë c√°ch h·ªèi ph·ªï bi·∫øn ƒë·ªÉ gi·ªõi thi·ªáu spa
    patterns = [
        fr"gi·ªõi thi·ªáu.*{re.escape(name_lower)}",
        fr"{re.escape(name_lower)}.*l√† g√¨",
        fr"th√¥ng tin.*{re.escape(name_lower)}",
        fr"{re.escape(name_lower)}.*·ªü ƒë√¢u",
        fr"{re.escape(name_lower)}.*c√≥.*t·ªët.*kh√¥ng",
    ]

    return any(re.search(p, message_lower) for p in patterns)

@BotDto.api.route('/messages')
class Message(BaseController):
  def get(self):
    return self.json_response([])
  
  @BotDto.api.expect(BotDto.post_message, validate=True)
  def post(self):
    message = self.get_request()['message']
    client = OpenAI(api_key=os.getenv('A_SECRET_KEY'))
    # system_prompt = """
    # B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n spa v√† th·∫©m m·ªπ vi·ªán.
    # B·∫°n **ch·ªâ ƒë∆∞·ª£c tr·∫£ l·ªùi** c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn:
    # - chƒÉm s√≥c da, t√≥c, c∆° th·ªÉ
    # - c√°c li·ªáu tr√¨nh spa, th·∫©m m·ªπ
    # - t∆∞ v·∫•n l√†m ƒë·∫πp, s·∫£n ph·∫©m d∆∞·ª°ng da, chƒÉm s√≥c sau d·ªãch v·ª•
    #
    # N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ ngo√†i lƒ©nh v·ª±c ƒë√≥ (nh∆∞ ch√≠nh tr·ªã, th·ªÉ thao, IT,...), b·∫°n ph·∫£i tr·∫£ l·ªùi:
    # "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ l√†m ƒë·∫πp, chƒÉm s√≥c da v√† spa."
    #
    # Tr·∫£ l·ªùi th√¢n thi·ªán, r√µ r√†ng v√† ng·∫Øn g·ªçn.
    # """

    spa_locations = [
      {"name": "Spa Lily", "address": "123 L√™ L·ª£i, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh"},
      {"name": "Th·∫©m m·ªπ vi·ªán Hoa Mai", "address": "456 Hai B√† Tr∆∞ng, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh"},
      {"name": "PMT", "address": "456 Hai B√† Tr∆∞ng, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh"},
      {"name": "Bella Spa", "address": "789 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh"},
      {"name": "Serenity Spa", "address": "88 Phan ƒê√¨nh Ph√πng, TP. ƒê√† N·∫µng"},
    ]
    spa_info = "\n".join([f"- {spa['name']} ‚Äî {spa['address']}" for spa in spa_locations])

    system_prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n spa v√† th·∫©m m·ªπ vi·ªán. B·∫°n c√≥ danh s√°ch c√°c spa sau:

        {spa_info}

        N·∫øu ng∆∞·ªùi d√πng h·ªèi t√¨m spa ·ªü t·ªânh/th√†nh n√†o, b·∫°n ch·ªâ ƒë∆∞·ª£c g·ª£i √Ω t·ª´ danh s√°ch tr√™n.

        N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn l√†m ƒë·∫πp ho·∫∑c spa, h√£y tr·∫£ l·ªùi: "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ l√†m ƒë·∫πp, chƒÉm s√≥c da v√† spa."

        Tr·∫£ l·ªùi th√¢n thi·ªán, ƒë√∫ng th√¥ng tin.
        """

    completion = client.chat.completions.create(
      model="gpt-4o",
      messages=[
        {"role": "system", "content": system_prompt},
        {
          "role": "user",
          "content": message,
        },
      ],
    )
    return self.json_response(completion.choices[0].message.content)


# v2
@BotDto.api.route('/messages/v2')
class MessageV2(BaseController):
    @BotDto.api.expect(BotDto.post_message, validate=True)
    def post(self):
        message = self.get_request()['message']
        client = OpenAI(api_key=os.getenv('A_SECRET_KEY'))

        # ‚úÖ Ph√¢n lo·∫°i c√¢u h·ªèi d√πng GPT: c√≥ ph·∫£i c√¢u h·ªèi da li·ªÖu/chƒÉm s√≥c kh√¥ng?
        def is_general_skin_question_gpt(message):
            system_msg = (
                "B·∫°n l√† m·ªôt b·ªô l·ªçc ph√¢n lo·∫°i c√¢u h·ªèi.\n"
                "N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn chƒÉm s√≥c da, l√†m ƒë·∫πp, m·ª•n, th√¢m, n√°m, l√£o h√≥a, d∆∞·ª°ng da, spa n√≥i chung (nh∆∞ng kh√¥ng h·ªèi t√™n d·ªãch v·ª• c·ª• th·ªÉ), tr·∫£ l·ªùi: YES.\n"
                "N·∫øu kh√¥ng ph·∫£i, tr·∫£ l·ªùi: NO.\n"
                "Ch·ªâ tr·∫£ v·ªÅ m·ªôt t·ª´ duy nh·∫•t: YES ho·∫∑c NO."
            )
            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_msg},
                    {"role": "user", "content": message},
                ],
            )
            reply = completion.choices[0].message.content.strip().upper()
            return reply == "YES"

        if is_general_skin_question_gpt(message):
            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† chuy√™n gia da li·ªÖu. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ hi·ªÉu cho ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ c√°c v·∫•n ƒë·ªÅ v·ªÅ da ho·∫∑c l√†m ƒë·∫πp."},
                    {"role": "user", "content": message},
                ],
            )
            return self.json_response(completion.choices[0].message.content.strip())

        spa_names = list(spa_services.keys())

        def extract_keywords(text):
            words = re.findall(r'\b[\w√Ä-·ª¥√†-·ªµ]{3,}\b', text.lower())
            return list(set(words))

        def detect_spa_in_message(message, spa_names):
            message_lower = message.lower()
            for name in spa_names:
                if name.lower() in message_lower:
                    return name
            matches = get_close_matches(message_lower, [s.lower() for s in spa_names], n=1, cutoff=0.5)
            if matches:
                return next((s for s in spa_names if s.lower() == matches[0]), None)
            return None

        def filter_services_by_keywords(services, keywords):
            results = []
            for s in services:
                combined_text = (s["name"] + " " + s["description"]).lower()
                if any(k in combined_text for k in keywords):
                    results.append(s)
            return results

        def find_exact_service_by_name(message, spa_services):
            message_lower = message.lower()
            for spa_name, services in spa_services.items():
                for s in services:
                    if s["name"].lower() in message_lower:
                        return {
                            "spa_name": spa_name,
                            "service": s
                        }
            return None

        matched_spa = detect_spa_in_message(message, spa_names)
        keywords = extract_keywords(message)

        if matched_spa:
            # N·∫øu ch·ªâ y√™u c·∫ßu gi·ªõi thi·ªáu spa
            if is_request_for_spa_intro(message, matched_spa):
                matched_spa_info = next((spa for spa in spa_locations if spa["name"] == matched_spa), None)
                if matched_spa_info and matched_spa_info.get("description"):
                    return self.json_response(
                        f"üìç **{matched_spa}** ‚Äî {matched_spa_info['address']}\n\n{matched_spa_info['description']}"
                    )
            keywords = extract_keywords(message)
            services = spa_services.get(matched_spa, [])
            matched_services = filter_services_by_keywords(services, keywords)

            if matched_services:
                reply_lines = [f"üíÜ D·ªãch v·ª• t·∫°i **{matched_spa}** ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:"]
                for s in matched_services:
                    reply_lines.append(f"- {s['name']}: {s['description']}")
                return self.json_response("\n".join(reply_lines))

            # üîç N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a d·ªãch v·ª• c·ª• th·ªÉ ‚Üí tr·∫£ v·ªÅ m√¥ t·∫£ spa
            matched_spa_info = next((spa for spa in spa_locations if spa["name"] == matched_spa), None)
            if matched_spa_info and matched_spa_info.get("description"):
                return self.json_response(
                    f"üìç **{matched_spa}** ‚Äî {matched_spa_info['address']}\n\n{matched_spa_info['description']}"
                )

            # N·∫øu c√≥ d·ªãch v·ª• nh∆∞ng kh√¥ng kh·ªõp t·ª´ kh√≥a ‚Üí li·ªát k√™ t·∫•t c·∫£
            if services:
                reply_lines = [f"ü§î Hi·ªán ch∆∞a th·∫•y d·ªãch v·ª• c·ª• th·ªÉ, nh∆∞ng ƒë√¢y l√† danh s√°ch t·∫°i **{matched_spa}**:"]
                for s in services:
                    reply_lines.append(f"- {s['name']}: {s['description']}")
                return self.json_response("\n".join(reply_lines))

            return self.json_response(f"Hi·ªán t·∫°i {matched_spa} ch∆∞a c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")

        # N·∫øu match ƒë√∫ng t√™n d·ªãch v·ª• ‚Üí ch·ªâ gi·ªõi thi·ªáu d·ªãch v·ª• ƒë√≥
        exact_service = find_exact_service_by_name(message, spa_services)
        if exact_service:
            s = exact_service["service"]
            spa_name = exact_service["spa_name"]
            return self.json_response(
                f"üíÜ **{s['name']}** t·∫°i **{spa_name}**:\n{s['description']}"
            )

        # N·∫øu kh√¥ng c√≥ t√™n c·ª• th·ªÉ, t√¨m keyword trong d·ªãch v·ª•
        matched_spa_services = []
        for spa_name, services in spa_services.items():
            matched_services = filter_services_by_keywords(services, keywords)
            if matched_services:
                matched_spa_services.append((spa_name, matched_services))

        if matched_spa_services:
            reply_lines = ["üí° C√°c spa c√≥ d·ªãch v·ª• ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:"]
            for spa_name, services in matched_spa_services:
                reply_lines.append(f"\n- **{spa_name}**")
                for s in services:
                    reply_lines.append(f"  - {s['name']}: {s['description']}")
            return self.json_response("\n".join(reply_lines))

        # Cu·ªëi c√πng fallback GPT n·∫øu kh√¥ng kh·ªõp g√¨
        spa_info = "\n".join([f"- {spa['name']} ‚Äî {spa['address']}" for spa in spa_locations])
        system_prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n spa v√† th·∫©m m·ªπ vi·ªán. B·∫°n c√≥ danh s√°ch c√°c spa sau:

        {spa_info}

        N·∫øu ng∆∞·ªùi d√πng h·ªèi t√¨m spa ·ªü t·ªânh/th√†nh n√†o, b·∫°n ch·ªâ ƒë∆∞·ª£c g·ª£i √Ω t·ª´ danh s√°ch tr√™n.

        N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ d·ªãch v·ª• c·ªßa m·ªôt spa c·ª• th·ªÉ, h√£y tr·∫£ l·ªùi ƒë√∫ng t√™n d·ªãch v·ª• v√† m√¥ t·∫£ (n·∫øu b·∫°n bi·∫øt).

        N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn l√†m ƒë·∫πp ho·∫∑c spa, h√£y tr·∫£ l·ªùi:
        "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ l√†m ƒë·∫πp, chƒÉm s√≥c da v√† spa."

        Tr·∫£ l·ªùi th√¢n thi·ªán, r√µ r√†ng v√† ng·∫Øn g·ªçn.
        """

        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message},
            ],
        )
        return self.json_response(completion.choices[0].message.content.strip())

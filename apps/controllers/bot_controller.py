from apps.dto.bot_dto import BotDto
from apps.controllers._base_controller import BaseController
import os
from openai import OpenAI
import re
from apps.utils.spa_locations import spa_locations
from apps.utils.spa_services import spa_services
from apps.extensions import cache
from apps.vector.training_vector import TrainingVector
from flask_restx import Resource

# load_dotenv()
# openai.api_key = os.getenv("OPENAI_API_KEY", "")

def is_request_for_spa_intro(message, spa_name):
    message_lower = message.lower()
    name_lower = spa_name.lower()

    # N·∫øu ch·ªâ ƒë∆°n gi·∫£n l√† t√™n spa ‚Üí y√™u c·∫ßu gi·ªõi thi·ªáu
    if message_lower.strip() == name_lower:
        return True

    # M·ªôt s·ªë c√°ch h·ªèi ph·ªï bi·∫øn ƒë·ªÉ gi·ªõi thi·ªáu spa
    patterns = [
        fr"gi·ªõi thi·ªáu.*{re.escape(name_lower)}",
        fr"{re.escape(name_lower)}.*l√† g√¨",
        fr"th√¥ng tin.*{re.escape(name_lower)}",
        fr"{re.escape(name_lower)}.*·ªü ƒë√¢u",
        fr"{re.escape(name_lower)}.*c√≥.*t·ªët.*kh√¥ng",
    ]

    return any(re.search(p, message_lower) for p in patterns)


@BotDto.api.route('/messages')
class Message(BaseController):
  def get(self):
    return self.json_response([])
  
  @BotDto.api.expect(BotDto.post_message, validate=True)
  def post(self):
    message = self.get_request()['message']
    client = OpenAI(api_key=os.getenv('A_SECRET_KEY'))
    # system_prompt = """
    # B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n spa v√† th·∫©m m·ªπ vi·ªán.
    # B·∫°n **ch·ªâ ƒë∆∞·ª£c tr·∫£ l·ªùi** c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn:
    # - chƒÉm s√≥c da, t√≥c, c∆° th·ªÉ
    # - c√°c li·ªáu tr√¨nh spa, th·∫©m m·ªπ
    # - t∆∞ v·∫•n l√†m ƒë·∫πp, s·∫£n ph·∫©m d∆∞·ª°ng da, chƒÉm s√≥c sau d·ªãch v·ª•
    #
    # N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch·ªß ƒë·ªÅ ngo√†i lƒ©nh v·ª±c ƒë√≥ (nh∆∞ ch√≠nh tr·ªã, th·ªÉ thao, IT,...), b·∫°n ph·∫£i tr·∫£ l·ªùi:
    # "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ l√†m ƒë·∫πp, chƒÉm s√≥c da v√† spa."
    #
    # Tr·∫£ l·ªùi th√¢n thi·ªán, r√µ r√†ng v√† ng·∫Øn g·ªçn.
    # """

    spa_locations = [
      {"name": "Spa Lily", "address": "123 L√™ L·ª£i, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh"},
      {"name": "Th·∫©m m·ªπ vi·ªán Hoa Mai", "address": "456 Hai B√† Tr∆∞ng, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh"},
      {"name": "PMT", "address": "456 Hai B√† Tr∆∞ng, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh"},
      {"name": "Bella Spa", "address": "789 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh"},
      {"name": "Serenity Spa", "address": "88 Phan ƒê√¨nh Ph√πng, TP. ƒê√† N·∫µng"},
    ]
    spa_info = "\n".join([f"- {spa['name']} ‚Äî {spa['address']}" for spa in spa_locations])

    system_prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n spa v√† th·∫©m m·ªπ vi·ªán. B·∫°n c√≥ danh s√°ch c√°c spa sau:

        {spa_info}

        N·∫øu ng∆∞·ªùi d√πng h·ªèi t√¨m spa ·ªü t·ªânh/th√†nh n√†o, b·∫°n ch·ªâ ƒë∆∞·ª£c g·ª£i √Ω t·ª´ danh s√°ch tr√™n.

        N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn l√†m ƒë·∫πp ho·∫∑c spa, h√£y tr·∫£ l·ªùi: "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ l√†m ƒë·∫πp, chƒÉm s√≥c da v√† spa."

        Tr·∫£ l·ªùi th√¢n thi·ªán, ƒë√∫ng th√¥ng tin.
        """

    completion = client.chat.completions.create(
      model="gpt-4o",
      messages=[
        {"role": "system", "content": system_prompt},
        {
          "role": "user",
          "content": message,
        },
      ],
    )
    return self.json_response(completion.choices[0].message.content)

#######
@BotDto.api.route('/messages/v2/<user_id>')
class GetMessageV2(BaseController):
    @BotDto.api.param('user_id', '', _in='path', required=True)
    def get(self, user_id):
        conversation_key = f"chat:{user_id}"
        history = cache.get(conversation_key) or []
        return self.json_response(history)

    @BotDto.api.param('user_id', '', _in='path', required=True)
    def delete(self, user_id):
        conversation_key = f"chat:{user_id}"
        cache.delete(conversation_key)
        return self.json_response({"message": "Conversation history deleted."})

@BotDto.api.route('/messages/v2')
class MessageV2(BaseController, Resource):
    @BotDto.api.expect(BotDto.post_message, validate=True)
    def post(self):
        # --- Input ---
        req = self.get_request() or {}
        message = req.get('message', '')
        user_id = req.get('user_id') or 123

        conversation_key = f"chat:{user_id}"
        history = cache.get(conversation_key) or []
        history.append({"role": "user", "content": message})

        helper = TrainingVector()
        client = OpenAI(api_key=os.getenv("A_SECRET_KEY"))
        ctx = helper.get_booking_context(user_id)

        # N·∫øu ƒëang booking m√† h·ªèi DS spa theo v·ªã tr√≠ ‚Üí d·ª´ng booking
        if helper.is_request_for_spa_list(message) and ctx.get("active"):
            helper.clear_booking_context(user_id)
            ctx = {"active": False}

        # ===== 0) TRA C·ª®U L·ªäCH H·∫∏N THEO KHO·∫¢NG TH·ªúI GIAN (h√¥m nay/ng√†y mai/tu·∫ßn n√†y...) =====
        if helper.is_appointments_lookup_intent(message):
            parsed = helper.parse_appointment_range(message)
            if parsed:
                s, e, title = parsed
                return helper.reply_my_appointments_in_range(user_id, s, e, title, conversation_key, history)

        # ===== 1) SKINCARE CHUNG (ƒê·∫∂T S·ªöM ‚Äî kh√¥ng ƒë·ªÉ b·ªã l·∫•n b·ªüi nh√°nh ‚Äúdanh s√°ch d·ªãch v·ª•‚Äù) =====
        if helper.is_skin_question_local(message) or helper.is_general_skin_question_gpt(message, client):
            if ctx.get("active"):
                helper.clear_booking_context(user_id)
            return helper.reply_with_gpt_history(client, history, message, user_id)

        # ===== 2) DANH S√ÅCH SPA THEO V·ªä TR√ç =====
        city_keywords = helper.extract_city_keywords(spa_locations)
        city = helper.extract_city_from_message(message, city_keywords)
        if city and helper.is_request_for_spa_list(message):
            matched_spas = helper.find_spas_by_city(spa_locations, city)
            return helper.reply_spa_list(city, matched_spas, conversation_key, history)

        # ===== 3) T√äN SPA ‚Üí GI·ªöI THI·ªÜU SPA =====
        spa_names = list(spa_services.keys())
        spa_name = helper.detect_spa_in_message(message, spa_names)
        if spa_name and helper.is_request_for_spa_intro(message, spa_name):
            return helper.reply_spa_intro(spa_name, spa_locations, conversation_key, history)

        # ===== 4) DANH S√ÅCH D·ªäCH V·ª§ (LU√îN CLEAR BOOKING CONTEXT ƒë·ªÉ kh√¥ng d√≠nh gi·ªù c≈©) =====
        if helper.is_request_for_service_list(message):
            target_spa = spa_name or ctx.get("spa_name") or cache.get(f"{conversation_key}:last_spa_focus")
            helper.clear_booking_context(user_id)  # üí° quan tr·ªçng: reset m·ªçi slot c≈© tr∆∞·ªõc khi list d·ªãch v·ª•
            if target_spa:
                return helper.reply_service_list(target_spa, spa_services, conversation_key, history)

            last_list = helper.get_last_spa_list(conversation_key)
            if last_list:
                picked = helper.resolve_spa_selection_from_message(message, last_list)
                if picked:
                    return helper.reply_service_list(picked, spa_services, conversation_key, history)
                return helper.reply_choose_spa_from_last_list(conversation_key, history, note="ƒë·ªÉ xem danh s√°ch d·ªãch v·ª•")

            return helper.finalize_reply("B·∫°n mu·ªën xem **danh s√°ch d·ªãch v·ª•** c·ªßa **spa n√†o** ·∫°?", conversation_key, history)

        # ===== 5) BOOKING (∆ØU TI√äN TR∆Ø·ªöC ‚ÄúXEM L·ªäCH H·∫∏N T·ªîNG‚Äù) =====
        if helper.is_booking_request(message) or ctx.get("active"):
            # 5.a ‚Äî ∆ØU TI√äN GI·ªú M·ªöI N√ìI; KH√îNG N√ìI GI·ªú ‚Üí X√ìA SLOT C≈® (tr√°nh d√≠nh)
            new_dt = helper.parse_datetime_from_message(message)
            if new_dt:
                ctx["slot"] = {"label": new_dt.strftime("%d/%m/%Y %H:%M"), "iso": new_dt.isoformat()}
                ctx.pop("available_slots", None)
                ctx.pop("confirmed", None)
            else:
                if helper.is_booking_request(message) and ctx.get("slot"):
                    ctx.pop("slot", None)
                    ctx.pop("available_slots", None)
                    ctx.pop("confirmed", None)

            # 5.b0 ‚Äî N·∫øu v√≤ng tr∆∞·ªõc ƒë√£ g·ª£i √Ω danh s√°ch d·ªãch v·ª• ‚Üí ƒë·ªçc ch·ªçn l·∫ßn n√†y
            if ctx.get("service_candidates") and not ctx.get("service_name"):
                chosen = helper.resolve_service_selection_from_message(message, ctx["service_candidates"])
                if chosen:
                    # ƒê·ªïi d·ªãch v·ª• ‚áí s·∫°ch gi·ªù c≈© (n·∫øu c√≤n)
                    if ctx.get("service_name") and ctx["service_name"] != chosen:
                        ctx.pop("slot", None); ctx.pop("available_slots", None); ctx.pop("confirmed", None)
                    ctx["service_name"] = chosen
                    ctx.pop("service_candidates", None)

            # 5.b1 ‚Äî L·∫•y D·ªäCH V·ª§ t·ª´ c√¢u n√≥i / ‚Äúd·ªãch v·ª• n√†y‚Äù / fuzzy
            if not ctx.get("service_name"):
                if helper.is_referring_prev_service(message):
                    last = cache.get(f"{conversation_key}:last_context")
                    if last:
                        ctx["service_name"] = last.get("service_name")
                        ctx.setdefault("spa_name", last.get("spa_name"))
                if not ctx.get("service_name"):
                    mentioned = helper.find_services_in_text(message, spa_services)
                    if mentioned:
                        unique = sorted({m["service"]["name"] for m in mentioned})
                        if len(unique) == 1:
                            # ƒê·ªïi d·ªãch v·ª• ‚áí s·∫°ch gi·ªù c≈©
                            if ctx.get("service_name") and ctx["service_name"] != unique[0]:
                                ctx.pop("slot", None); ctx.pop("available_slots", None); ctx.pop("confirmed", None)
                            ctx["service_name"] = unique[0]
                        else:
                            ctx["service_candidates"] = unique
                            helper.set_booking_context(user_id, {**ctx, "active": True})
                            return helper.reply_choose_service(unique, conversation_key, history)

            # 5.b2 ‚Äî X√°c ƒë·ªãnh SPA (t·ª´ message > last_spa_focus > theo d·ªãch v·ª•)
            if not ctx.get("spa_name"):
                spa_from_msg = spa_name or helper.detect_spa_in_message(message, spa_names)
                if spa_from_msg:
                    ctx["spa_name"] = spa_from_msg
                else:
                    last_focus = cache.get(f"{conversation_key}:last_spa_focus")
                    if last_focus:
                        ctx["spa_name"] = last_focus
                    elif ctx.get("service_name"):
                        spas_for_service = helper.get_spas_by_service_name(ctx["service_name"])
                        helper.set_booking_context(user_id, {**ctx, "active": True})
                        if len(spas_for_service) == 0:
                            return helper.finalize_reply(
                                "D·ªãch v·ª• n√†y hi·ªán ch∆∞a c√≥ spa n√†o trong h·ªá th·ªëng. B·∫°n mu·ªën ch·ªçn d·ªãch v·ª• kh√°c kh√¥ng?",
                                conversation_key, history
                            )
                        elif len(spas_for_service) == 1:
                            ctx["spa_name"] = spas_for_service[0]["name"]
                        else:
                            slot_label = ctx["slot"]["label"] if ctx.get("slot") else None
                            return helper.reply_choose_spa_for_service(
                                ctx["service_name"], spas_for_service, conversation_key, history, slot_label=slot_label
                            )
                    else:
                        helper.set_booking_context(user_id, {**ctx, "active": True})
                        return helper.finalize_reply(
                            "B·∫°n mu·ªën ƒë·∫∑t **d·ªãch v·ª•** n√†o v√† t·∫°i **spa** n√†o ·∫°? (B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi: 't√™n d·ªãch v·ª• + t√™n spa')",
                            conversation_key, history
                        )

            # 5.b3 ‚Äî N·∫øu ƒë√£ bi·∫øt SPA m√† ch∆∞a c√≥ d·ªãch v·ª• ‚Üí h·ªèi ch·ªçn d·ªãch v·ª• c·ªßa spa ƒë√≥
            if ctx.get("spa_name") and not ctx.get("service_name"):
                service_list = [s["name"] for s in spa_services.get(ctx["spa_name"], [])]
                ctx["service_candidates"] = service_list
                helper.set_booking_context(user_id, {**ctx, "active": True})
                return helper.reply_choose_service_for_spa(ctx["spa_name"], service_list, conversation_key, history)

            # 5.c ‚Äî N·∫øu ch∆∞a c√≥ slot ‚Üí g·ª£i √Ω slot
            if not ctx.get("slot"):
                slots = helper.get_available_slots(ctx["spa_name"])
                ctx["available_slots"] = slots
                helper.set_booking_context(user_id, {**ctx, "active": True})
                return helper.ask_booking_info(slots, conversation_key, history)

            # 5.d ‚Äî X√°c nh·∫≠n (ƒë√£ t·∫Øt thu th·∫≠p t√™n/ƒëi·ªán tho·∫°i theo y√™u c·∫ßu)
            filled, ctx, ask = helper.handle_booking_details(ctx, message)
            helper.set_booking_context(user_id, {**ctx, "active": True})
            if not filled:
                return helper.finalize_reply(ask, conversation_key, history)

            # 5.e ‚Äî L∆∞u + clean context c≈©
            confirmation = helper.confirm_booking(ctx)
            helper.add_appointment(user_id, ctx)
            helper.clear_booking_context(user_id)
            return helper.finalize_reply(confirmation, conversation_key, history)

        # ===== 6) DANH S√ÅCH L·ªäCH H·∫∏N (T·ªîNG) =====
        if helper.is_request_for_my_appointments(message):
            return helper.reply_my_appointments(user_id, conversation_key, history)

        # ===== 7) GI·ªöI THI·ªÜU D·ªäCH V·ª§ C·ª§ TH·ªÇ (ch·ªâ khi KH√îNG booking) =====
        exact = helper.find_exact_service_by_name(message, spa_services)
        if exact and not helper.is_booking_request(message):
            return helper.reply_service_detail(exact, conversation_key, history)

        # ===== 8) FALLBACK (GPT t∆∞ v·∫•n chung) =====
        return helper.reply_with_gpt_history(client, history, message, user_id)